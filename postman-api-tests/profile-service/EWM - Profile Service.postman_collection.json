{
	"info": {
		"_postman_id": "d083ad06-70b5-46e1-ad90-febda2600715",
		"name": "EWM - Profile Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25751491"
	},
	"item": [
		{
			"name": "Healthcheck",
			"item": [
				{
					"name": "Healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.test('Status should be UP', () => {\r",
									"    pm.expect(response).to.haveOwnProperty('status').to.be.a('string');\r",
									"    pm.expect(response.status).to.eql('UP');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{profileServiceUrl}}/actuator/health",
							"host": [
								"{{profileServiceUrl}}"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET /profiles/me",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "GET /profiles/me",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Should contain correct email', () => {\r",
											"    const adminEmail = pm.variables.get('adminEmail');\r",
											"    pm.expect(response).to.haveOwnProperty('email').to.be.a('string');\r",
											"    pm.expect(response.email).to.eql(adminEmail);\r",
											"});\r",
											"\r",
											"pm.test('Should contain other profile info', () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response).to.haveOwnProperty('firstName').to.be.a('string');\r",
											"    pm.expect(response).to.haveOwnProperty('lastName').to.be.a('string');\r",
											"\r",
											"    const middleName = response.middleName;\r",
											"    pm.expect(typeof middleName === 'string' || middleName === null).to.be.true;\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-User",
										"value": "{{adminEmail}}",
										"type": "text"
									},
									{
										"key": "X-User-Roles",
										"value": "{{adminRoles}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{profileServiceUrl}}/profiles/me",
									"host": [
										"{{profileServiceUrl}}"
									],
									"path": [
										"profiles",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "User not authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Should contain correct message', () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
											"    pm.expect(response.message)\r",
											"        .to.eql(\"Forbidden: You don't have permission to access this resource\");\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{profileServiceUrl}}/profiles/me",
									"host": [
										"{{profileServiceUrl}}"
									],
									"path": [
										"profiles",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Robot Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Should contain correct message', () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
											"    pm.expect(response.message)\r",
											"        .to.eql(\"Unauthorized to access this resource, login please\");\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-User",
										"value": "{{adminEmail}}",
										"type": "text"
									},
									{
										"key": "X-User-Roles",
										"value": "{{adminRoles}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{profileServiceUrl}}/profiles/me",
									"host": [
										"{{profileServiceUrl}}"
									],
									"path": [
										"profiles",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Profile does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Should contain correct message', () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
											"\r",
											"    const email = pm.variables.get('noProfileEmail');\r",
											"    pm.expect(response.message)\r",
											"        .to.eql(`User with email: ${email} does not exist!`);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-User",
										"value": "{{noProfileEmail}}",
										"type": "text"
									},
									{
										"key": "X-User-Roles",
										"value": "{{noProfileRole}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{profileServiceUrl}}/profiles/me",
									"host": [
										"{{profileServiceUrl}}"
									],
									"path": [
										"profiles",
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Create Profile",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Create Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const createProfileEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.collectionVariables.set(\"createProfileEmail\", createProfileEmail);\r",
											"\r",
											"const createProfileFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"createProfileFirstName\", createProfileFirstName);\r",
											"\r",
											"const createProfileLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"pm.collectionVariables.set(\"createProfileLastName\", createProfileLastName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{createProfileEmail}}\",\r\n    \"firstName\": \"{{createProfileFirstName}}\",\r\n    \"lastName\": \"{{createProfileLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profileServiceUrl}}/qa/profiles",
									"host": [
										"{{profileServiceUrl}}"
									],
									"path": [
										"qa",
										"profiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /profiles/me",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Should contain correct email', () => {\r",
											"    const adminEmail = pm.variables.get('createProfileEmail');\r",
											"    pm.expect(response).to.haveOwnProperty('email').to.be.a('string');\r",
											"    pm.expect(response.email).to.eql(adminEmail);\r",
											"});\r",
											"\r",
											"pm.test('Should contain other profile info', () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response).to.haveOwnProperty('firstName').to.be.a('string');\r",
											"    pm.expect(response).to.haveOwnProperty('lastName').to.be.a('string');\r",
											"\r",
											"    const middleName = response.middleName;\r",
											"    pm.expect(typeof middleName === 'string' || middleName === null).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test('Should contain correct first name and last name', () => {\r",
											"    const firstName = pm.variables.get('createProfileFirstName');\r",
											"    const lastName = pm.variables.get('createProfileLastName');\r",
											"\r",
											"    pm.expect(response.firstName).to.eql(firstName);\r",
											"    pm.expect(response.lastName).to.eql(lastName);\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-User",
										"value": "{{createProfileEmail}}",
										"type": "text"
									},
									{
										"key": "X-User-Roles",
										"value": "ROLE_OPERATOR",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{profileServiceUrl}}/profiles/me",
									"host": [
										"{{profileServiceUrl}}"
									],
									"path": [
										"profiles",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Create Duplicate Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const duplicateProfileFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"duplicateProfileFirstName\", duplicateProfileFirstName);\r",
											"\r",
											"const duplicateProfileLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"pm.collectionVariables.set(\"duplicateProfileLastName\", duplicateProfileLastName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{adminEmail}}\",\r\n    \"firstName\": \"{{duplicateProfileFirstName}}\",\r\n    \"lastName\": \"{{duplicateProfileLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profileServiceUrl}}/qa/profiles",
									"host": [
										"{{profileServiceUrl}}"
									],
									"path": [
										"qa",
										"profiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /profiles/me",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('Should contain correct email', () => {\r",
											"    const adminEmail = pm.variables.get('adminEmail');\r",
											"    pm.expect(response).to.haveOwnProperty('email').to.be.a('string');\r",
											"    pm.expect(response.email).to.eql(adminEmail);\r",
											"});\r",
											"\r",
											"pm.test('Should contain other profile info', () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response).to.haveOwnProperty('firstName').to.be.a('string');\r",
											"    pm.expect(response).to.haveOwnProperty('lastName').to.be.a('string');\r",
											"\r",
											"    const middleName = response.middleName;\r",
											"    pm.expect(typeof middleName === 'string' || middleName === null).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test('Should contain correct first name and last name', () => {\r",
											"    const firstName = pm.variables.get('duplicateProfileFirstName');\r",
											"    const lastName = pm.variables.get('duplicateProfileLastName');\r",
											"\r",
											"    pm.expect(response.firstName).not.to.eql(firstName);\r",
											"    pm.expect(response.lastName).not.to.eql(lastName);\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-User",
										"value": "{{adminEmail}}",
										"type": "text"
									},
									{
										"key": "X-User-Roles",
										"value": "{{adminRoles}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{profileServiceUrl}}/profiles/me",
									"host": [
										"{{profileServiceUrl}}"
									],
									"path": [
										"profiles",
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Update Profile",
			"item": [
				{
					"name": "Publisher",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Create Profile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const updateProfileEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
													"pm.collectionVariables.set(\"updateProfileEmail\", updateProfileEmail);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{updateProfileEmail}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{profileServiceUrl}}/qa/profiles",
											"host": [
												"{{profileServiceUrl}}"
											],
											"path": [
												"qa",
												"profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update profile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const updateProfileFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
													"pm.collectionVariables.set(\"updateProfileFirstName\", updateProfileFirstName);\r",
													"\r",
													"const updateProfileLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
													"pm.collectionVariables.set(\"updateProfileLastName\", updateProfileLastName);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-User",
												"value": "{{updateProfileEmail}}",
												"type": "text"
											},
											{
												"key": "X-User-Roles",
												"value": "ROLE_OPERATOR",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"{{updateProfileFirstName}}\",\r\n    \"lastName\": \"{{updateProfileLastName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{profileServiceUrl}}/profiles/me",
											"host": [
												"{{profileServiceUrl}}"
											],
											"path": [
												"profiles",
												"me"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "No robot token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const updateProfileFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
													"pm.collectionVariables.set(\"updateProfileFirstName\", updateProfileFirstName);\r",
													"\r",
													"const updateProfileLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
													"pm.collectionVariables.set(\"updateProfileLastName\", updateProfileLastName);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Correct error message\", () => {\r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.eql('Unauthorized to access this resource, login please')\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "X-User",
												"value": "{{updateProfileEmail}}",
												"type": "text"
											},
											{
												"key": "X-User-Roles",
												"value": "ROLE_OPERATOR",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"{{updateProfileFirstName}}\",\r\n    \"lastName\": \"{{updateProfileLastName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{profileServiceUrl}}/profiles/me",
											"host": [
												"{{profileServiceUrl}}"
											],
											"path": [
												"profiles",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "No user headers",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const updateProfileFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
													"pm.collectionVariables.set(\"updateProfileFirstName\", updateProfileFirstName);\r",
													"\r",
													"const updateProfileLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
													"pm.collectionVariables.set(\"updateProfileLastName\", updateProfileLastName);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Correct error message\", () => {\r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.eql(\"Forbidden: You don't have permission to access this resource\")\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"{{updateProfileFirstName}}\",\r\n    \"lastName\": \"{{updateProfileLastName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{profileServiceUrl}}/profiles/me",
											"host": [
												"{{profileServiceUrl}}"
											],
											"path": [
												"profiles",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "First name missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const updateProfileFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
													"pm.collectionVariables.set(\"updateProfileFirstName\", updateProfileFirstName);\r",
													"\r",
													"const updateProfileLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
													"pm.collectionVariables.set(\"updateProfileLastName\", updateProfileLastName);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Should contain valid error message\", () => {\r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.eql('First name cannot be empty');\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-User",
												"value": "{{updateProfileEmail}}",
												"type": "text"
											},
											{
												"key": "X-User-Roles",
												"value": "ROLE_OPERATOR",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"lastName\": \"{{updateProfileLastName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{profileServiceUrl}}/profiles/me",
											"host": [
												"{{profileServiceUrl}}"
											],
											"path": [
												"profiles",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Last name missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const updateProfileFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
													"pm.collectionVariables.set(\"updateProfileFirstName\", updateProfileFirstName);\r",
													"\r",
													"const updateProfileLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
													"pm.collectionVariables.set(\"updateProfileLastName\", updateProfileLastName);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Should contain valid error message\", () => {\r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.eql('Last name cannot be empty');\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-User",
												"value": "{{updateProfileEmail}}",
												"type": "text"
											},
											{
												"key": "X-User-Roles",
												"value": "ROLE_OPERATOR",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"{{updateProfileFirstName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{profileServiceUrl}}/profiles/me",
											"host": [
												"{{profileServiceUrl}}"
											],
											"path": [
												"profiles",
												"me"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Subscriber",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Existing Profile",
									"item": [
										{
											"name": "Create Profile",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const updateProfileEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
															"pm.collectionVariables.set(\"updateProfileEmail\", updateProfileEmail);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {\r",
															"    pm.response.to.have.status(201);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"{{updateProfileEmail}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{profileServiceUrl}}/qa/profiles",
													"host": [
														"{{profileServiceUrl}}"
													],
													"path": [
														"qa",
														"profiles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update profile",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const updateProfileFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
															"pm.collectionVariables.set(\"updateProfileFirstName\", updateProfileFirstName);\r",
															"\r",
															"const updateProfileLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
															"pm.collectionVariables.set(\"updateProfileLastName\", updateProfileLastName);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"{{updateProfileEmail}}\",\r\n    \"firstName\": \"{{updateProfileFirstName}}\",\r\n    \"lastName\": \"{{updateProfileLastName}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{profileServiceUrl}}/qa/profiles",
													"host": [
														"{{profileServiceUrl}}"
													],
													"path": [
														"qa",
														"profiles"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET /profiles/me",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test('Should contain correct email', () => {\r",
															"    const adminEmail = pm.variables.get('updateProfileEmail');\r",
															"    pm.expect(response).to.haveOwnProperty('email').to.be.a('string');\r",
															"    pm.expect(response.email).to.eql(adminEmail);\r",
															"});\r",
															"\r",
															"pm.test('Should contain other profile info', () => {\r",
															"    pm.expect(response).to.be.an('object');\r",
															"    pm.expect(response).to.haveOwnProperty('firstName').to.be.a('string');\r",
															"    pm.expect(response).to.haveOwnProperty('lastName').to.be.a('string');\r",
															"\r",
															"    const middleName = response.middleName;\r",
															"    pm.expect(typeof middleName === 'string' || middleName === null).to.be.true;\r",
															"})\r",
															"\r",
															"pm.test('Should contain correct first name and last name', () => {\r",
															"    const firstName = pm.variables.get('updateProfileFirstName');\r",
															"    const lastName = pm.variables.get('updateProfileLastName');\r",
															"\r",
															"    pm.expect(response.firstName).to.eql(firstName);\r",
															"    pm.expect(response.lastName).to.eql(lastName);\r",
															"})\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-User",
														"value": "{{updateProfileEmail}}",
														"type": "text"
													},
													{
														"key": "X-User-Roles",
														"value": "ROLE_OPERATOR",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{profileServiceUrl}}/profiles/me",
													"host": [
														"{{profileServiceUrl}}"
													],
													"path": [
														"profiles",
														"me"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "New Profile",
									"item": [
										{
											"name": "Update profile",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const updateProfileEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
															"pm.collectionVariables.set(\"updateProfileEmail\", updateProfileEmail);\r",
															"\r",
															"const updateProfileFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
															"pm.collectionVariables.set(\"updateProfileFirstName\", updateProfileFirstName);\r",
															"\r",
															"const updateProfileLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
															"pm.collectionVariables.set(\"updateProfileLastName\", updateProfileLastName);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"{{updateProfileEmail}}\",\r\n    \"firstName\": \"{{updateProfileFirstName}}\",\r\n    \"lastName\": \"{{updateProfileLastName}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{profileServiceUrl}}/qa/profiles",
													"host": [
														"{{profileServiceUrl}}"
													],
													"path": [
														"qa",
														"profiles"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET /profiles/me",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test('Should contain correct email', () => {\r",
															"    const adminEmail = pm.variables.get('updateProfileEmail');\r",
															"    pm.expect(response).to.haveOwnProperty('email').to.be.a('string');\r",
															"    pm.expect(response.email).to.eql(adminEmail);\r",
															"});\r",
															"\r",
															"pm.test('Should contain other profile info', () => {\r",
															"    pm.expect(response).to.be.an('object');\r",
															"    pm.expect(response).to.haveOwnProperty('firstName').to.be.a('string');\r",
															"    pm.expect(response).to.haveOwnProperty('lastName').to.be.a('string');\r",
															"\r",
															"    const middleName = response.middleName;\r",
															"    pm.expect(typeof middleName === 'string' || middleName === null).to.be.true;\r",
															"})\r",
															"\r",
															"pm.test('Should contain correct first name and last name', () => {\r",
															"    const firstName = pm.variables.get('updateProfileFirstName');\r",
															"    const lastName = pm.variables.get('updateProfileLastName');\r",
															"\r",
															"    pm.expect(response.firstName).to.eql(firstName);\r",
															"    pm.expect(response.lastName).to.eql(lastName);\r",
															"})\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-User",
														"value": "{{updateProfileEmail}}",
														"type": "text"
													},
													{
														"key": "X-User-Roles",
														"value": "ROLE_OPERATOR",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{profileServiceUrl}}/profiles/me",
													"host": [
														"{{profileServiceUrl}}"
													],
													"path": [
														"profiles",
														"me"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Profile Image",
			"item": [
				{
					"name": "Update profile image",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Update JPEG image",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-User",
												"value": "{{adminEmail}}",
												"type": "text"
											},
											{
												"key": "X-User-Roles",
												"value": "{{adminRoles}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "profile-service/correctJpeg.jpg"
												}
											]
										},
										"url": {
											"raw": "{{profileServiceUrl}}/profiles/me/image",
											"host": [
												"{{profileServiceUrl}}"
											],
											"path": [
												"profiles",
												"me",
												"image"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": []
						}
					]
				},
				{
					"name": "Get profile image",
					"item": [
						{
							"name": "Positive",
							"item": []
						},
						{
							"name": "Negative",
							"item": []
						}
					]
				},
				{
					"name": "Get Profile Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-User",
								"value": "{{adminEmail}}",
								"type": "text"
							},
							{
								"key": "X-User-Roles",
								"value": "{{adminRoles}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{profileServiceUrl}}/profiles/me/image",
							"host": [
								"{{profileServiceUrl}}"
							],
							"path": [
								"profiles",
								"me",
								"image"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{robotToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "profileServiceUrl",
			"value": "http://localhost:8082",
			"type": "string"
		},
		{
			"key": "adminEmail",
			"value": "admin@maxq.com",
			"type": "default"
		},
		{
			"key": "adminRoles",
			"value": "ROLE_ADMIN",
			"type": "default"
		},
		{
			"key": "noProfileEmail",
			"value": "noProfile@test.com",
			"type": "string"
		},
		{
			"key": "noProfileRole",
			"value": "ROLE_OPERATOR",
			"type": "string"
		},
		{
			"key": "createProfileEmail",
			"value": ""
		},
		{
			"key": "createProfileFirstName",
			"value": ""
		},
		{
			"key": "createProfileLastName",
			"value": ""
		},
		{
			"key": "duplicateProfileFirstName",
			"value": ""
		},
		{
			"key": "duplicateProfileLastName",
			"value": ""
		},
		{
			"key": "updateProfileEmail",
			"value": ""
		},
		{
			"key": "updateProfileFirstName",
			"value": ""
		},
		{
			"key": "updateProfileLastName",
			"value": ""
		}
	]
}