{
	"info": {
		"_postman_id": "18b3b5b8-2262-4c38-93f0-bbfb60db3814",
		"name": "EWM - Authorization Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25751491"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Register new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const registerEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.collectionVariables.set(\"registerEmail\", registerEmail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{registerEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Cannot register existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(\"User with this email already exists!\");\r",
											"})\r",
											"\r",
											"pm.test(\"Response should contain email\", () => {\r",
											"    const registerEmail = pm.variables.get(\"registerEmail\");\r",
											"    pm.expect(response.message).to.include(registerEmail);\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{registerEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot register without email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(\"Email cannot be empty\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot register without password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(\"Password cannot be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot register with blank email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(\"Email cannot be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": null,\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot register with blank password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(\"Password cannot be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot register with password too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const minimumCharacters = 4;\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(`The password have to be at least ${minimumCharacters} characters long`);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Login as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Should containt token\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
											"})\r",
											"\r",
											"pm.test(\"Should be correct type\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
											"    pm.expect(response.type).to.eql('Bearer');\r",
											"})\r",
											"\r",
											"pm.test(\"Should expire in 1h\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
											"    pm.expect(response.expiresIn).to.eql(3600);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{adminPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{adminEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login as operator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Should containt token\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
											"})\r",
											"\r",
											"pm.test(\"Should be correct type\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
											"    pm.expect(response.type).to.eql('Bearer');\r",
											"})\r",
											"\r",
											"pm.test(\"Should expire in 1h\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
											"    pm.expect(response.expiresIn).to.eql(3600);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{operatorPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{operatorEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login as designer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Should containt token\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
											"})\r",
											"\r",
											"pm.test(\"Should be correct type\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
											"    pm.expect(response.type).to.eql('Bearer');\r",
											"})\r",
											"\r",
											"pm.test(\"Should expire in 1h\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
											"    pm.expect(response.expiresIn).to.eql(3600);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{designerPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{designerEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Login with wrong credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
											"    pm.expect(response.message).to.include('Unauthorized to access this resource, login please');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123456",
											"type": "string"
										},
										{
											"key": "username",
											"value": "unknown@unknown.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with disabled account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
											"    pm.expect(response.message).to.include('Unauthorized to access this resource, login please');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "12345",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{registerEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Registration Confirmation",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Register new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const confirmEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.collectionVariables.set(\"confirmEmail\", confirmEmail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{confirmEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch verification token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.text();\r",
											"\r",
											"pm.test(\"Response contain valid token\", () => {\r",
											"    pm.expect(response).to.be.a('string');\r",
											"    pm.collectionVariables.set('verificationToken', response);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/qa/token?email={{confirmEmail}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"qa",
										"token"
									],
									"query": [
										{
											"key": "email",
											"value": "{{confirmEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/register/confirm?token={{verificationToken}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register",
										"confirm"
									],
									"query": [
										{
											"key": "token",
											"value": "{{verificationToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Login after enabling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Should containt token\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
											"})\r",
											"\r",
											"pm.test(\"Should be correct type\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
											"    pm.expect(response.type).to.eql('Bearer');\r",
											"})\r",
											"\r",
											"pm.test(\"Should expire in 1h\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
											"    pm.expect(response.expiresIn).to.eql(3600);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{confirmEmail}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "12345",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Expired Token",
							"item": [
								{
									"name": "Register new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const disabledEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
													"pm.collectionVariables.set(\"disabledEmail\", disabledEmail);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{disabledEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8081/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login with disabled credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Correct message is returned\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.eql('Unauthorized to access this resource, login please');\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{disabledEmail}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "12345",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/login",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch verification token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.text();\r",
													"\r",
													"pm.test(\"Response contain valid token\", () => {\r",
													"    pm.expect(response).to.be.a('string');\r",
													"    pm.collectionVariables.set('expiredToken', response);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/qa/token?email={{disabledEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"qa",
												"token"
											],
											"query": [
												{
													"key": "email",
													"value": "{{disabledEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Expire token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const date = new Date();\r",
													"const expiredDate = new Date(date.setMinutes(date.getMinutes() - (24 * 60)) - 1);\r",
													"const expiredDateJavaLocalDateTimeString = expiredDate.toISOString().replace(/Z/g, '')\r",
													"pm.collectionVariables.set('expiredDate', expiredDateJavaLocalDateTimeString);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/qa/token/:token?creationDate={{expiredDate}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"qa",
												"token",
												":token"
											],
											"query": [
												{
													"key": "creationDate",
													"value": "{{expiredDate}}"
												}
											],
											"variable": [
												{
													"key": "token",
													"value": "{{expiredToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Registration with expired token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", () => {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test('Should include correct message', () => {\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.include('Provided verification token expired');\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/register/confirm?token={{expiredToken}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register",
												"confirm"
											],
											"query": [
												{
													"key": "token",
													"value": "{{expiredToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Used Token",
							"item": [
								{
									"name": "Register new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const reuseTokenEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
													"pm.collectionVariables.set(\"reuseTokenEmail\", reuseTokenEmail);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{reuseTokenEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8081/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch verification token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.text();\r",
													"\r",
													"pm.test(\"Response contain valid token\", () => {\r",
													"    pm.expect(response).to.be.a('string');\r",
													"    pm.collectionVariables.set('reusedToken', response);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/qa/token?email={{reuseTokenEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"qa",
												"token"
											],
											"query": [
												{
													"key": "email",
													"value": "{{reuseTokenEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Confirm registration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/register/confirm?token={{reusedToken}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register",
												"confirm"
											],
											"query": [
												{
													"key": "token",
													"value": "{{reusedToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reused registration token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", () => {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test('Correct message returned', () => {\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.eql('Provided verification token was already used')\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/register/confirm?token={{reusedToken}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register",
												"confirm"
											],
											"query": [
												{
													"key": "token",
													"value": "{{reusedToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Token",
							"item": [
								{
									"name": "Register new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const invalidTokenEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
													"pm.collectionVariables.set(\"invalidTokenEmail\", invalidTokenEmail);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{invalidTokenEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8081/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Confirm registration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Should contain correct response message\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.eql('Verification token was not found');\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/register/confirm?token=test",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register",
												"confirm"
											],
											"query": [
												{
													"key": "token",
													"value": "test"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Forgotten Password",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Register new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const forgottenPasswordEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.collectionVariables.set(\"forgottenPasswordEmail\", forgottenPasswordEmail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{forgottenPasswordEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch verification token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.text();\r",
											"\r",
											"pm.test(\"Response contain valid token\", () => {\r",
											"    pm.expect(response).to.be.a('string');\r",
											"    pm.collectionVariables.set('forgottenPasswordVerificationEmail', response);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/qa/token?email={{forgottenPasswordEmail}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"qa",
										"token"
									],
									"query": [
										{
											"key": "email",
											"value": "{{forgottenPasswordEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/register/confirm?token={{forgottenPasswordVerificationEmail}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register",
										"confirm"
									],
									"query": [
										{
											"key": "token",
											"value": "{{forgottenPasswordVerificationEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Password Reset",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/password/reset?email={{forgottenPasswordEmail}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"password",
										"reset"
									],
									"query": [
										{
											"key": "email",
											"value": "{{forgottenPasswordEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch verification token Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.text();\r",
											"\r",
											"pm.test(\"Response contain valid token\", () => {\r",
											"    pm.expect(response).to.be.a('string');\r",
											"    pm.collectionVariables.set('resetPasswordToken', response);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/qa/token?email={{forgottenPasswordEmail}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"qa",
										"token"
									],
									"query": [
										{
											"key": "email",
											"value": "{{forgottenPasswordEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Password Reset Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var encodedPassword = require('btoa')(pm.variables.get('newPassword'));\r",
											"pm.collectionVariables.set('encodedPassword', encodedPassword);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/password/reset?token={{resetPasswordToken}}&password={{encodedPassword}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"password",
										"reset"
									],
									"query": [
										{
											"key": "token",
											"value": "{{resetPasswordToken}}"
										},
										{
											"key": "password",
											"value": "{{encodedPassword}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Login after password reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Should containt token\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
											"})\r",
											"\r",
											"pm.test(\"Should be correct type\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
											"    pm.expect(response.type).to.eql('Bearer');\r",
											"})\r",
											"\r",
											"pm.test(\"Should expire in 1h\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
											"    pm.expect(response.expiresIn).to.eql(3600);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{newPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{forgottenPasswordEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Non-Existing Email",
							"item": [
								{
									"name": "Request Password Reset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const nonExistingEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
													"pm.collectionVariables.set(\"nonExistingEmail\", nonExistingEmail);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/password/reset?email={{nonExistingEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"password",
												"reset"
											],
											"query": [
												{
													"key": "email",
													"value": "{{nonExistingEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch verification token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Response contain valid message\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.include('User with email');\r",
													"    pm.expect(response.message).to.include('does not exist');\r",
													"});\r",
													"pm.test(\"Response contains correct email\", () => {\r",
													"    const nonExistingEmail = pm.variables.get('nonExistingEmail');\r",
													"    pm.expect(response.message).to.include(nonExistingEmail);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/qa/token?email={{nonExistingEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"qa",
												"token"
											],
											"query": [
												{
													"key": "email",
													"value": "{{nonExistingEmail}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Used Token",
							"item": [
								{
									"name": "Register new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const reusedPasswordEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
													"pm.collectionVariables.set(\"reusedPasswordEmail\", reusedPasswordEmail);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{reusedPasswordEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8081/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch verification token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.text();\r",
													"\r",
													"pm.test(\"Response contain valid token\", () => {\r",
													"    pm.expect(response).to.be.a('string');\r",
													"    pm.collectionVariables.set('reusedPasswordResetToken', response);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/qa/token?email={{reusedPasswordEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"qa",
												"token"
											],
											"query": [
												{
													"key": "email",
													"value": "{{reusedPasswordEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Confirm registration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/register/confirm?token={{reusedPasswordResetToken}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register",
												"confirm"
											],
											"query": [
												{
													"key": "token",
													"value": "{{reusedPasswordResetToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request Password Reset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/password/reset?email={{reusedPasswordEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"password",
												"reset"
											],
											"query": [
												{
													"key": "email",
													"value": "{{reusedPasswordEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch verification token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.text();\r",
													"\r",
													"pm.test(\"Response contain valid token\", () => {\r",
													"    pm.expect(response).to.be.a('string');\r",
													"    pm.collectionVariables.set('reusedPasswordResetToken', response);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/qa/token?email={{reusedPasswordEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"qa",
												"token"
											],
											"query": [
												{
													"key": "email",
													"value": "{{reusedPasswordEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request Password Reset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var encodedPassword = require('btoa')(pm.variables.get('newPassword'));\r",
													"pm.collectionVariables.set('encodedPassword', encodedPassword);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/password/reset?token={{reusedPasswordResetToken}}&password={{encodedPassword}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"password",
												"reset"
											],
											"query": [
												{
													"key": "token",
													"value": "{{reusedPasswordResetToken}}"
												},
												{
													"key": "password",
													"value": "{{encodedPassword}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request With Reused Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var encodedPassword = require('btoa')(pm.variables.get('newPassword'));\r",
													"pm.collectionVariables.set('encodedPassword', encodedPassword);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", () => {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test('Should include correct message', () => {\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.include('Provided verification token was already used');\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/password/reset?token={{reusedPasswordResetToken}}&password={{encodedPassword}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"password",
												"reset"
											],
											"query": [
												{
													"key": "token",
													"value": "{{reusedPasswordResetToken}}"
												},
												{
													"key": "password",
													"value": "{{encodedPassword}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Expired Token",
							"item": [
								{
									"name": "Register new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const expiredPasswordTokenEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
													"pm.collectionVariables.set(\"expiredPasswordTokenEmail\", expiredPasswordTokenEmail);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{expiredPasswordTokenEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8081/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch verification token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.text();\r",
													"\r",
													"pm.test(\"Response contain valid token\", () => {\r",
													"    pm.expect(response).to.be.a('string');\r",
													"    pm.collectionVariables.set('expiredPasswordToken', response);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/qa/token?email={{expiredPasswordTokenEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"qa",
												"token"
											],
											"query": [
												{
													"key": "email",
													"value": "{{expiredPasswordTokenEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Confirm registration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/register/confirm?token={{expiredPasswordToken}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register",
												"confirm"
											],
											"query": [
												{
													"key": "token",
													"value": "{{expiredPasswordToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request Password Reset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/password/reset?email={{expiredPasswordTokenEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"password",
												"reset"
											],
											"query": [
												{
													"key": "email",
													"value": "{{expiredPasswordTokenEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch verification token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.text();\r",
													"\r",
													"pm.test(\"Response contain valid token\", () => {\r",
													"    pm.expect(response).to.be.a('string');\r",
													"    pm.collectionVariables.set('expiredPasswordToken', response);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/qa/token?email={{expiredPasswordTokenEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"qa",
												"token"
											],
											"query": [
												{
													"key": "email",
													"value": "{{expiredPasswordTokenEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Expire token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const date = new Date();\r",
													"const expiredDate = new Date(date.setMinutes(date.getMinutes() - (24 * 60)) - 1);\r",
													"const expiredDateJavaLocalDateTimeString = expiredDate.toISOString().replace(/Z/g, '')\r",
													"pm.collectionVariables.set('expiredDate', expiredDateJavaLocalDateTimeString);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/qa/token/:token?creationDate={{expiredDate}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"qa",
												"token",
												":token"
											],
											"query": [
												{
													"key": "creationDate",
													"value": "{{expiredDate}}"
												}
											],
											"variable": [
												{
													"key": "token",
													"value": "{{expiredPasswordToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request Password Reset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var encodedPassword = require('btoa')(pm.variables.get('newPassword'));\r",
													"pm.collectionVariables.set('encodedPassword', encodedPassword);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", () => {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test('Should contain correct error message', () => {\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.include('Provided verification token expired at:');\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/password/reset?token={{expiredPasswordToken}}&password={{encodedPassword}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"password",
												"reset"
											],
											"query": [
												{
													"key": "token",
													"value": "{{expiredPasswordToken}}"
												},
												{
													"key": "password",
													"value": "{{encodedPassword}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Token",
							"item": [
								{
									"name": "Register new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const invalidTokenEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
													"pm.collectionVariables.set(\"invalidTokenEmail\", invalidTokenEmail);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{invalidTokenEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8081/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch verification token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.text();\r",
													"\r",
													"pm.test(\"Response contain valid token\", () => {\r",
													"    pm.expect(response).to.be.a('string');\r",
													"    pm.collectionVariables.set('validVerificationToken', response);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/qa/token?email={{invalidTokenEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"qa",
												"token"
											],
											"query": [
												{
													"key": "email",
													"value": "{{invalidTokenEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Confirm registration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/register/confirm?token={{validVerificationToken}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register",
												"confirm"
											],
											"query": [
												{
													"key": "token",
													"value": "{{validVerificationToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request Password Reset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/password/reset?email={{invalidTokenEmail}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"password",
												"reset"
											],
											"query": [
												{
													"key": "email",
													"value": "{{invalidTokenEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request Password Reset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var encodedPassword = require('btoa')(pm.variables.get('newPassword'));\r",
													"pm.collectionVariables.set('encodedPassword', encodedPassword);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test('Should contain correct error message', () => {\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.eql('Verification token was not found');\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/password/reset?token=token&password={{encodedPassword}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"password",
												"reset"
											],
											"query": [
												{
													"key": "token",
													"value": "token"
												},
												{
													"key": "password",
													"value": "{{encodedPassword}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "Method not allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", () => {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.test(\"Should contain correct response message\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
									"    pm.expect(response.message).to.include('Request method GET not supported');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles API",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Login as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Should containt token\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
											"    pm.collectionVariables.set('adminToken', response.token);\r",
											"})\r",
											"\r",
											"pm.test(\"Should be correct type\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
											"    pm.expect(response.type).to.eql('Bearer');\r",
											"})\r",
											"\r",
											"pm.test(\"Should expire in 1h\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
											"    pm.expect(response.expiresIn).to.eql(3600);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{adminPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{adminEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Should contain at least one role\", () => {\r",
											"    pm.expect(response).to.have.length.greaterThan(0);\r",
											"})\r",
											"\r",
											"pm.test(\"Should contain valid data in reponse\", () => {\r",
											"    const role = response[0];\r",
											"    pm.expect(role).to.haveOwnProperty('id').that.is.a('number');\r",
											"    pm.expect(role).to.haveOwnProperty('name').that.is.a('string');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/roles",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Forbidden",
							"item": [
								{
									"name": "Login as operator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Should containt token\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
													"    pm.collectionVariables.set('operatorToken', response.token);\r",
													"})\r",
													"\r",
													"pm.test(\"Should be correct type\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
													"    pm.expect(response.type).to.eql('Bearer');\r",
													"})\r",
													"\r",
													"pm.test(\"Should expire in 1h\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
													"    pm.expect(response.expiresIn).to.eql(3600);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{operatorPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{operatorEmail}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/login",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Should contain a message in response\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
													"    pm.expect(response.message).to.eql(\"Forbidden: You don't have permission to access this resource\");\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{operatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/roles",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"roles"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Users API",
			"item": [
				{
					"name": "GET /users",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Login as admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Should containt token\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
													"    pm.collectionVariables.set('adminToken', response.token);\r",
													"})\r",
													"\r",
													"pm.test(\"Should be correct type\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
													"    pm.expect(response.type).to.eql('Bearer');\r",
													"})\r",
													"\r",
													"pm.test(\"Should expire in 1h\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
													"    pm.expect(response.expiresIn).to.eql(3600);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{adminPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{adminEmail}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/login",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all users - default pagination",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Should contain valid content\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('content').that.is.an('array');\r",
													"    pm.expect(response.content).to.have.length.greaterThan(0);\r",
													"\r",
													"    const user = response.content[0];\r",
													"    pm.expect(user).to.haveOwnProperty('id').that.is.a('number');\r",
													"    pm.expect(user).to.haveOwnProperty('email').that.is.a('string');\r",
													"    pm.expect(user).to.haveOwnProperty('enabled').that.is.a('boolean');\r",
													"    pm.expect(user).to.haveOwnProperty('roles').that.is.an('array');\r",
													"})\r",
													"\r",
													"pm.test(\"Should contain valid pagination data\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('last').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('first').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('size').that.is.a('number');\r",
													"    pm.expect(response).to.haveOwnProperty('number').that.is.a('number');\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/users",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all users - custom pagination",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Should contain valid content\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('content').that.is.an('array');\r",
													"})\r",
													"\r",
													"pm.test(\"Should contain valid pagination data\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('last').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('first').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('size').that.is.a('number');\r",
													"    pm.expect(response).to.haveOwnProperty('number').that.is.a('number');\r",
													"\r",
													"    pm.expect(response.size).to.eql(1);\r",
													"    pm.expect(response.number).to.eql(1);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/users?page=1&size=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Forbidden",
									"item": [
										{
											"name": "Login as operator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should containt token\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
															"    pm.collectionVariables.set('operatorToken', response.token);\r",
															"})\r",
															"\r",
															"pm.test(\"Should be correct type\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
															"    pm.expect(response.type).to.eql('Bearer');\r",
															"})\r",
															"\r",
															"pm.test(\"Should expire in 1h\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
															"    pm.expect(response.expiresIn).to.eql(3600);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{operatorPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{operatorEmail}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/login",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all users",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", () => {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should contain a message in response\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
															"    pm.expect(response.message).to.eql(\"Forbidden: You don't have permission to access this resource\");\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{operatorToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Add role",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Register new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const addRoleEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
													"pm.collectionVariables.set(\"addRoleEmail\", addRoleEmail);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{addRoleEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8081/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login as admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Should containt token\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
													"    pm.collectionVariables.set('adminToken', response.token);\r",
													"})\r",
													"\r",
													"pm.test(\"Should be correct type\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
													"    pm.expect(response.type).to.eql('Bearer');\r",
													"})\r",
													"\r",
													"pm.test(\"Should expire in 1h\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
													"    pm.expect(response.expiresIn).to.eql(3600);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{adminPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{adminEmail}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/login",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Should contain valid content\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('content').that.is.an('array');\r",
													"    pm.expect(response.content).to.have.length.greaterThan(0);\r",
													"\r",
													"    const user = response.content[0];\r",
													"    pm.expect(user).to.haveOwnProperty('id').that.is.a('number');\r",
													"    pm.expect(user).to.haveOwnProperty('email').that.is.a('string');\r",
													"    pm.expect(user).to.haveOwnProperty('enabled').that.is.a('boolean');\r",
													"    pm.expect(user).to.haveOwnProperty('roles').that.is.an('array');\r",
													"})\r",
													"\r",
													"pm.test(\"Should contain valid pagination data\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('last').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('first').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('size').that.is.a('number');\r",
													"    pm.expect(response).to.haveOwnProperty('number').that.is.a('number');\r",
													"})\r",
													"\r",
													"const users = response.content;\r",
													"const newUserEmail = pm.variables.get('addRoleEmail')\r",
													"const newUser = users.find(user => user.email === newUserEmail);\r",
													"pm.collectionVariables.set('addRoleUserId', newUser.id);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/users?size=1000",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"users"
											],
											"query": [
												{
													"key": "size",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Should contain at least one role\", () => {\r",
													"    pm.expect(response).to.have.length.greaterThan(0);\r",
													"})\r",
													"\r",
													"pm.test(\"Should contain valid data in reponse\", () => {\r",
													"    const role = response[0];\r",
													"    pm.expect(role).to.haveOwnProperty('id').that.is.a('number');\r",
													"    pm.expect(role).to.haveOwnProperty('name').that.is.a('string');\r",
													"})\r",
													"\r",
													"const operatorRole = response.find(role => role.name === 'OPERATOR');\r",
													"pm.collectionVariables.set('operatorRoleId', operatorRole.id);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/roles",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/users/:addRoleUserId/addRole?role={{operatorRoleId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"users",
												":addRoleUserId",
												"addRole"
											],
											"query": [
												{
													"key": "role",
													"value": "{{operatorRoleId}}"
												}
											],
											"variable": [
												{
													"key": "addRoleUserId",
													"value": "{{addRoleUserId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Should contain valid content\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('content').that.is.an('array');\r",
													"    pm.expect(response.content).to.have.length.greaterThan(0);\r",
													"\r",
													"    const user = response.content[0];\r",
													"    pm.expect(user).to.haveOwnProperty('id').that.is.a('number');\r",
													"    pm.expect(user).to.haveOwnProperty('email').that.is.a('string');\r",
													"    pm.expect(user).to.haveOwnProperty('enabled').that.is.a('boolean');\r",
													"    pm.expect(user).to.haveOwnProperty('roles').that.is.an('array');\r",
													"})\r",
													"\r",
													"pm.test(\"Should contain valid pagination data\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('last').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('first').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('size').that.is.a('number');\r",
													"    pm.expect(response).to.haveOwnProperty('number').that.is.a('number');\r",
													"})\r",
													"\r",
													"pm.test(\"User have correctly updated role\", () => {\r",
													"    const users = response.content;\r",
													"    const updatedUser = users.find(user => user.id === pm.variables.get('addRoleUserId'));\r",
													"\r",
													"    pm.expect(updatedUser).to.haveOwnProperty('roles').that.is.an('array');\r",
													"    pm.expect(updatedUser.roles).to.have.length(2);\r",
													"    console.log(updatedUser.roles);\r",
													"    \r",
													"    const userRoles = updatedUser.roles;\r",
													"    const newRole = userRoles.find(role => role.id === pm.variables.get('operatorRoleId'));\r",
													"    pm.expect(newRole).to.exist;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/users?size=1000",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"users"
											],
											"query": [
												{
													"key": "size",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "User Does Not Exist",
									"item": [
										{
											"name": "Login as admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should containt token\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
															"    pm.collectionVariables.set('adminToken', response.token);\r",
															"})\r",
															"\r",
															"pm.test(\"Should be correct type\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
															"    pm.expect(response.type).to.eql('Bearer');\r",
															"})\r",
															"\r",
															"pm.test(\"Should expire in 1h\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
															"    pm.expect(response.expiresIn).to.eql(3600);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{adminPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{adminEmail}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/login",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should contain at least one role\", () => {\r",
															"    pm.expect(response).to.have.length.greaterThan(0);\r",
															"})\r",
															"\r",
															"pm.test(\"Should contain valid data in reponse\", () => {\r",
															"    const role = response[0];\r",
															"    pm.expect(role).to.haveOwnProperty('id').that.is.a('number');\r",
															"    pm.expect(role).to.haveOwnProperty('name').that.is.a('string');\r",
															"})\r",
															"\r",
															"const operatorRole = response.find(role => role.name === 'OPERATOR');\r",
															"pm.collectionVariables.set('operatorRoleId', operatorRole.id);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/roles",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"roles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", () => {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should containt valid error message\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
															"    pm.expect(response.message).to.eql(\"User with id '0' does not exist\");\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users/:addRoleUserId/addRole?role={{operatorRoleId}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users",
														":addRoleUserId",
														"addRole"
													],
													"query": [
														{
															"key": "role",
															"value": "{{operatorRoleId}}"
														}
													],
													"variable": [
														{
															"key": "addRoleUserId",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Role Does Not Exist",
									"item": [
										{
											"name": "Register new user",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const roleNotExistsEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
															"pm.collectionVariables.set(\"roleNotExistsEmail\", roleNotExistsEmail);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {\r",
															"    pm.response.to.have.status(201);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"{{roleNotExistsEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:8081/register",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"register"
													]
												}
											},
											"response": []
										},
										{
											"name": "Login as admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should containt token\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
															"    pm.collectionVariables.set('adminToken', response.token);\r",
															"})\r",
															"\r",
															"pm.test(\"Should be correct type\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
															"    pm.expect(response.type).to.eql('Bearer');\r",
															"})\r",
															"\r",
															"pm.test(\"Should expire in 1h\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
															"    pm.expect(response.expiresIn).to.eql(3600);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{adminPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{adminEmail}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/login",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all users",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should contain valid content\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('content').that.is.an('array');\r",
															"    pm.expect(response.content).to.have.length.greaterThan(0);\r",
															"\r",
															"    const user = response.content[0];\r",
															"    pm.expect(user).to.haveOwnProperty('id').that.is.a('number');\r",
															"    pm.expect(user).to.haveOwnProperty('email').that.is.a('string');\r",
															"    pm.expect(user).to.haveOwnProperty('enabled').that.is.a('boolean');\r",
															"    pm.expect(user).to.haveOwnProperty('roles').that.is.an('array');\r",
															"})\r",
															"\r",
															"pm.test(\"Should contain valid pagination data\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('last').that.is.a('boolean');\r",
															"    pm.expect(response).to.haveOwnProperty('first').that.is.a('boolean');\r",
															"    pm.expect(response).to.haveOwnProperty('size').that.is.a('number');\r",
															"    pm.expect(response).to.haveOwnProperty('number').that.is.a('number');\r",
															"})\r",
															"\r",
															"const users = response.content;\r",
															"const newUserEmail = pm.variables.get('roleNotExistsEmail')\r",
															"const newUser = users.find(user => user.email === newUserEmail);\r",
															"pm.collectionVariables.set('roleNotExistsUserId', newUser.id);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users?size=1000",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users"
													],
													"query": [
														{
															"key": "size",
															"value": "1000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", () => {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should containt valid error message\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
															"    pm.expect(response.message).to.eql(\"Role with id '0' does not exist\");\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users/:addRoleUserId/addRole?role=0",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users",
														":addRoleUserId",
														"addRole"
													],
													"query": [
														{
															"key": "role",
															"value": "0"
														}
													],
													"variable": [
														{
															"key": "addRoleUserId",
															"value": "{{roleNotExistsUserId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Role Already Exists On User",
									"item": [
										{
											"name": "Login as admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should containt token\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
															"    pm.collectionVariables.set('adminToken', response.token);\r",
															"})\r",
															"\r",
															"pm.test(\"Should be correct type\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
															"    pm.expect(response.type).to.eql('Bearer');\r",
															"})\r",
															"\r",
															"pm.test(\"Should expire in 1h\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
															"    pm.expect(response.expiresIn).to.eql(3600);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{adminPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{adminEmail}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/login",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all users",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should contain valid content\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('content').that.is.an('array');\r",
															"    pm.expect(response.content).to.have.length.greaterThan(0);\r",
															"\r",
															"    const user = response.content[0];\r",
															"    pm.expect(user).to.haveOwnProperty('id').that.is.a('number');\r",
															"    pm.expect(user).to.haveOwnProperty('email').that.is.a('string');\r",
															"    pm.expect(user).to.haveOwnProperty('enabled').that.is.a('boolean');\r",
															"    pm.expect(user).to.haveOwnProperty('roles').that.is.an('array');\r",
															"})\r",
															"\r",
															"pm.test(\"Should contain valid pagination data\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('last').that.is.a('boolean');\r",
															"    pm.expect(response).to.haveOwnProperty('first').that.is.a('boolean');\r",
															"    pm.expect(response).to.haveOwnProperty('size').that.is.a('number');\r",
															"    pm.expect(response).to.haveOwnProperty('number').that.is.a('number');\r",
															"})\r",
															"\r",
															"const users = response.content;\r",
															"const newUserEmail = pm.variables.get('operatorEmail')\r",
															"const newUser = users.find(user => user.email === newUserEmail);\r",
															"pm.collectionVariables.set('operatorUserId', newUser.id);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users?size=1000",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users"
													],
													"query": [
														{
															"key": "size",
															"value": "1000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should contain at least one role\", () => {\r",
															"    pm.expect(response).to.have.length.greaterThan(0);\r",
															"})\r",
															"\r",
															"pm.test(\"Should contain valid data in reponse\", () => {\r",
															"    const role = response[0];\r",
															"    pm.expect(role).to.haveOwnProperty('id').that.is.a('number');\r",
															"    pm.expect(role).to.haveOwnProperty('name').that.is.a('string');\r",
															"})\r",
															"\r",
															"const operatorRole = response.find(role => role.name === 'OPERATOR');\r",
															"pm.collectionVariables.set('operatorRoleId', operatorRole.id);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/roles",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"roles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", () => {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should containt valid error message\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
															"    pm.expect(response.message).to.contain(\"Role 'OPERATOR' already exists on user:\");\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users/:addRoleUserId/addRole?role={{operatorRoleId}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users",
														":addRoleUserId",
														"addRole"
													],
													"query": [
														{
															"key": "role",
															"value": "{{operatorRoleId}}"
														}
													],
													"variable": [
														{
															"key": "addRoleUserId",
															"value": "{{operatorUserId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forbidden",
									"item": [
										{
											"name": "Login as operator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should containt token\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
															"    pm.collectionVariables.set('operatorToken', response.token);\r",
															"})\r",
															"\r",
															"pm.test(\"Should be correct type\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
															"    pm.expect(response.type).to.eql('Bearer');\r",
															"})\r",
															"\r",
															"pm.test(\"Should expire in 1h\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
															"    pm.expect(response.expiresIn).to.eql(3600);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{operatorPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{operatorEmail}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/login",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", () => {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should contain a message in response\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
															"    pm.expect(response.message).to.eql(\"Forbidden: You don't have permission to access this resource\");\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{operatorToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users/:addRoleUserId/addRole?role=0",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users",
														":addRoleUserId",
														"addRole"
													],
													"query": [
														{
															"key": "role",
															"value": "0"
														}
													],
													"variable": [
														{
															"key": "addRoleUserId",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Remove role",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Register new user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const removeRoleEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
													"pm.collectionVariables.set(\"removeRoleEmail\", removeRoleEmail);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{removeRoleEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8081/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login as admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Should containt token\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
													"    pm.collectionVariables.set('adminToken', response.token);\r",
													"})\r",
													"\r",
													"pm.test(\"Should be correct type\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
													"    pm.expect(response.type).to.eql('Bearer');\r",
													"})\r",
													"\r",
													"pm.test(\"Should expire in 1h\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
													"    pm.expect(response.expiresIn).to.eql(3600);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{adminPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{adminEmail}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/login",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Should contain valid content\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('content').that.is.an('array');\r",
													"    pm.expect(response.content).to.have.length.greaterThan(0);\r",
													"\r",
													"    const user = response.content[0];\r",
													"    pm.expect(user).to.haveOwnProperty('id').that.is.a('number');\r",
													"    pm.expect(user).to.haveOwnProperty('email').that.is.a('string');\r",
													"    pm.expect(user).to.haveOwnProperty('enabled').that.is.a('boolean');\r",
													"    pm.expect(user).to.haveOwnProperty('roles').that.is.an('array');\r",
													"})\r",
													"\r",
													"pm.test(\"Should contain valid pagination data\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('last').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('first').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('size').that.is.a('number');\r",
													"    pm.expect(response).to.haveOwnProperty('number').that.is.a('number');\r",
													"})\r",
													"\r",
													"const users = response.content;\r",
													"const newUserEmail = pm.variables.get('removeRoleEmail')\r",
													"const newUser = users.find(user => user.email === newUserEmail);\r",
													"const removeRoleRoleId = newUser.roles[0].id;\r",
													"pm.collectionVariables.set('removeRoleUserId', newUser.id);\r",
													"pm.collectionVariables.set('removeRoleRoleId', removeRoleRoleId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/users?size=1000",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"users"
											],
											"query": [
												{
													"key": "size",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/users/:removeRoleUserId/removeRole?role={{removeRoleRoleId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"users",
												":removeRoleUserId",
												"removeRole"
											],
											"query": [
												{
													"key": "role",
													"value": "{{removeRoleRoleId}}"
												}
											],
											"variable": [
												{
													"key": "removeRoleUserId",
													"value": "{{removeRoleUserId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Should contain valid content\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('content').that.is.an('array');\r",
													"    pm.expect(response.content).to.have.length.greaterThan(0);\r",
													"\r",
													"    const user = response.content[0];\r",
													"    pm.expect(user).to.haveOwnProperty('id').that.is.a('number');\r",
													"    pm.expect(user).to.haveOwnProperty('email').that.is.a('string');\r",
													"    pm.expect(user).to.haveOwnProperty('enabled').that.is.a('boolean');\r",
													"    pm.expect(user).to.haveOwnProperty('roles').that.is.an('array');\r",
													"})\r",
													"\r",
													"pm.test(\"Should contain valid pagination data\", () => {\r",
													"    pm.expect(response).to.haveOwnProperty('last').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('first').that.is.a('boolean');\r",
													"    pm.expect(response).to.haveOwnProperty('size').that.is.a('number');\r",
													"    pm.expect(response).to.haveOwnProperty('number').that.is.a('number');\r",
													"})\r",
													"\r",
													"pm.test(\"User have correctly updated role\", () => {\r",
													"    const users = response.content;\r",
													"    const updatedUser = users.find(user => user.id === pm.variables.get('removeRoleUserId'));\r",
													"\r",
													"    pm.expect(updatedUser).to.haveOwnProperty('roles').that.is.an('array');\r",
													"    pm.expect(updatedUser.roles).to.have.length(0);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8081/users?size=1000",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"users"
											],
											"query": [
												{
													"key": "size",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "User Does Not Exist",
									"item": [
										{
											"name": "Login as admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should containt token\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
															"    pm.collectionVariables.set('adminToken', response.token);\r",
															"})\r",
															"\r",
															"pm.test(\"Should be correct type\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
															"    pm.expect(response.type).to.eql('Bearer');\r",
															"})\r",
															"\r",
															"pm.test(\"Should expire in 1h\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
															"    pm.expect(response.expiresIn).to.eql(3600);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{adminPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{adminEmail}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/login",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should contain at least one role\", () => {\r",
															"    pm.expect(response).to.have.length.greaterThan(0);\r",
															"})\r",
															"\r",
															"pm.test(\"Should contain valid data in reponse\", () => {\r",
															"    const role = response[0];\r",
															"    pm.expect(role).to.haveOwnProperty('id').that.is.a('number');\r",
															"    pm.expect(role).to.haveOwnProperty('name').that.is.a('string');\r",
															"})\r",
															"\r",
															"const operatorRole = response.find(role => role.name === 'OPERATOR');\r",
															"pm.collectionVariables.set('operatorRoleId', operatorRole.id);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/roles",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"roles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", () => {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should containt valid error message\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
															"    pm.expect(response.message).to.eql(\"User with id '0' does not exist\");\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users/:removeRoleUserId/removeRole?role={{operatorRoleId}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users",
														":removeRoleUserId",
														"removeRole"
													],
													"query": [
														{
															"key": "role",
															"value": "{{operatorRoleId}}"
														}
													],
													"variable": [
														{
															"key": "removeRoleUserId",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Role Does Not Exist",
									"item": [
										{
											"name": "Register new user",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const roleNotExistsEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
															"pm.collectionVariables.set(\"roleNotExistsEmail\", roleNotExistsEmail);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {\r",
															"    pm.response.to.have.status(201);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"{{roleNotExistsEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:8081/register",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"register"
													]
												}
											},
											"response": []
										},
										{
											"name": "Login as admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should containt token\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
															"    pm.collectionVariables.set('adminToken', response.token);\r",
															"})\r",
															"\r",
															"pm.test(\"Should be correct type\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
															"    pm.expect(response.type).to.eql('Bearer');\r",
															"})\r",
															"\r",
															"pm.test(\"Should expire in 1h\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
															"    pm.expect(response.expiresIn).to.eql(3600);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{adminPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{adminEmail}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/login",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all users",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should contain valid content\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('content').that.is.an('array');\r",
															"    pm.expect(response.content).to.have.length.greaterThan(0);\r",
															"\r",
															"    const user = response.content[0];\r",
															"    pm.expect(user).to.haveOwnProperty('id').that.is.a('number');\r",
															"    pm.expect(user).to.haveOwnProperty('email').that.is.a('string');\r",
															"    pm.expect(user).to.haveOwnProperty('enabled').that.is.a('boolean');\r",
															"    pm.expect(user).to.haveOwnProperty('roles').that.is.an('array');\r",
															"})\r",
															"\r",
															"pm.test(\"Should contain valid pagination data\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('last').that.is.a('boolean');\r",
															"    pm.expect(response).to.haveOwnProperty('first').that.is.a('boolean');\r",
															"    pm.expect(response).to.haveOwnProperty('size').that.is.a('number');\r",
															"    pm.expect(response).to.haveOwnProperty('number').that.is.a('number');\r",
															"})\r",
															"\r",
															"const users = response.content;\r",
															"const newUserEmail = pm.variables.get('roleNotExistsEmail')\r",
															"const newUser = users.find(user => user.email === newUserEmail);\r",
															"pm.collectionVariables.set('roleNotExistsUserId', newUser.id);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users?size=1000",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users"
													],
													"query": [
														{
															"key": "size",
															"value": "1000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", () => {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should containt valid error message\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
															"    pm.expect(response.message).to.eql(\"Role with id '0' does not exist\");\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users/:removeRoleUserId/removeRole?role=0",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users",
														":removeRoleUserId",
														"removeRole"
													],
													"query": [
														{
															"key": "role",
															"value": "0"
														}
													],
													"variable": [
														{
															"key": "removeRoleUserId",
															"value": "{{roleNotExistsUserId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Role Does Not Exist On User",
									"item": [
										{
											"name": "Login as admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should containt token\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
															"    pm.collectionVariables.set('adminToken', response.token);\r",
															"})\r",
															"\r",
															"pm.test(\"Should be correct type\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
															"    pm.expect(response.type).to.eql('Bearer');\r",
															"})\r",
															"\r",
															"pm.test(\"Should expire in 1h\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
															"    pm.expect(response.expiresIn).to.eql(3600);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{adminPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{adminEmail}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/login",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all users",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should contain valid content\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('content').that.is.an('array');\r",
															"    pm.expect(response.content).to.have.length.greaterThan(0);\r",
															"\r",
															"    const user = response.content[0];\r",
															"    pm.expect(user).to.haveOwnProperty('id').that.is.a('number');\r",
															"    pm.expect(user).to.haveOwnProperty('email').that.is.a('string');\r",
															"    pm.expect(user).to.haveOwnProperty('enabled').that.is.a('boolean');\r",
															"    pm.expect(user).to.haveOwnProperty('roles').that.is.an('array');\r",
															"})\r",
															"\r",
															"pm.test(\"Should contain valid pagination data\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('last').that.is.a('boolean');\r",
															"    pm.expect(response).to.haveOwnProperty('first').that.is.a('boolean');\r",
															"    pm.expect(response).to.haveOwnProperty('size').that.is.a('number');\r",
															"    pm.expect(response).to.haveOwnProperty('number').that.is.a('number');\r",
															"})\r",
															"\r",
															"const users = response.content;\r",
															"const newUserEmail = pm.variables.get('operatorEmail')\r",
															"const newUser = users.find(user => user.email === newUserEmail);\r",
															"pm.collectionVariables.set('operatorUserId', newUser.id);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users?size=1000",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users"
													],
													"query": [
														{
															"key": "size",
															"value": "1000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should contain at least one role\", () => {\r",
															"    pm.expect(response).to.have.length.greaterThan(0);\r",
															"})\r",
															"\r",
															"pm.test(\"Should contain valid data in reponse\", () => {\r",
															"    const role = response[0];\r",
															"    pm.expect(role).to.haveOwnProperty('id').that.is.a('number');\r",
															"    pm.expect(role).to.haveOwnProperty('name').that.is.a('string');\r",
															"})\r",
															"\r",
															"const designerRole = response.find(role => role.name === 'DESIGNER');\r",
															"pm.collectionVariables.set('designerRoleId', designerRole.id);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/roles",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"roles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", () => {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should containt valid error message\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
															"    pm.expect(response.message).to.contain(\"Role 'DESIGNER' does not exist on user:\");\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{adminToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users/:removeRoleUserId/removeRole?role={{designerRoleId}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users",
														":removeRoleUserId",
														"removeRole"
													],
													"query": [
														{
															"key": "role",
															"value": "{{designerRoleId}}"
														}
													],
													"variable": [
														{
															"key": "removeRoleUserId",
															"value": "{{operatorUserId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forbidden",
									"item": [
										{
											"name": "Login as operator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"\r",
															"pm.test(\"Should containt token\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
															"    pm.collectionVariables.set('operatorToken', response.token);\r",
															"})\r",
															"\r",
															"pm.test(\"Should be correct type\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
															"    pm.expect(response.type).to.eql('Bearer');\r",
															"})\r",
															"\r",
															"pm.test(\"Should expire in 1h\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
															"    pm.expect(response.expiresIn).to.eql(3600);\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{operatorPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{operatorEmail}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/login",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", () => {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"const response = pm.response.json();\r",
															"pm.test(\"Should contain a message in response\", () => {\r",
															"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
															"    pm.expect(response.message).to.eql(\"Forbidden: You don't have permission to access this resource\");\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{operatorToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "http://localhost:8081/users/:removeRoleUserId?role=0",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8081",
													"path": [
														"users",
														":removeRoleUserId"
													],
													"query": [
														{
															"key": "role",
															"value": "0"
														}
													],
													"variable": [
														{
															"key": "removeRoleUserId",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "registerEmail",
			"value": ""
		},
		{
			"key": "adminEmail",
			"value": "admin@maxq.com",
			"type": "string"
		},
		{
			"key": "adminPassword",
			"value": "Admin12345",
			"type": "string"
		},
		{
			"key": "confirmEmail",
			"value": ""
		},
		{
			"key": "verificationToken",
			"value": ""
		},
		{
			"key": "disabledEmail",
			"value": ""
		},
		{
			"key": "expiredToken",
			"value": ""
		},
		{
			"key": "expiredDate",
			"value": ""
		},
		{
			"key": "reuseTokenEmail",
			"value": ""
		},
		{
			"key": "reusedToken",
			"value": ""
		},
		{
			"key": "forgottenPasswordEmail",
			"value": ""
		},
		{
			"key": "forgottenPasswordVerificationEmail",
			"value": ""
		},
		{
			"key": "forgottenPasswordVerificationToken",
			"value": ""
		},
		{
			"key": "resetPasswordToken",
			"value": ""
		},
		{
			"key": "encodedPassword",
			"value": ""
		},
		{
			"key": "newPassword",
			"value": "test12345",
			"type": "string"
		},
		{
			"key": "nonExistingEmail",
			"value": ""
		},
		{
			"key": "reusedPasswordEmail",
			"value": ""
		},
		{
			"key": "reusedPasswordResetToken",
			"value": ""
		},
		{
			"key": "invalidTokenEmail",
			"value": ""
		},
		{
			"key": "expiredPasswordTokenEmail",
			"value": ""
		},
		{
			"key": "expiredPasswordToken",
			"value": ""
		},
		{
			"key": "validVerificationToken",
			"value": ""
		},
		{
			"key": "operatorEmail",
			"value": "operator@maxq.com",
			"type": "string"
		},
		{
			"key": "operatorPassword",
			"value": "Operator12345",
			"type": "string"
		},
		{
			"key": "designerEmail",
			"value": "designer@maxq.com",
			"type": "string"
		},
		{
			"key": "designerPassword",
			"value": "Designer12345",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": ""
		},
		{
			"key": "operatorToken",
			"value": ""
		},
		{
			"key": "addRoleEmail",
			"value": ""
		},
		{
			"key": "addRoleUserId",
			"value": ""
		},
		{
			"key": "operatorRoleId",
			"value": ""
		},
		{
			"key": "roleNotExistsEmail",
			"value": ""
		},
		{
			"key": "roleNotExistsUserId",
			"value": ""
		},
		{
			"key": "operatorUserId",
			"value": ""
		},
		{
			"key": "removeRoleEmail",
			"value": ""
		},
		{
			"key": "removeRoleUserId",
			"value": ""
		},
		{
			"key": "removeRoleRoleId",
			"value": ""
		},
		{
			"key": "designerRoleId",
			"value": ""
		}
	]
}