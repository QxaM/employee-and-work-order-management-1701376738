{
	"info": {
		"_postman_id": "18b3b5b8-2262-4c38-93f0-bbfb60db3814",
		"name": "EWM - Authorization Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25751491"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Register new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const registerEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.collectionVariables.set(\"registerEmail\", registerEmail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{registerEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Cannot register existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(\"User with this email already exists!\");\r",
											"})\r",
											"\r",
											"pm.test(\"Response should contain email\", () => {\r",
											"    const registerEmail = pm.variables.get(\"registerEmail\");\r",
											"    pm.expect(response.message).to.include(registerEmail);\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{registerEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot register without email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(\"Email cannot be empty\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot register without password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(\"Password cannot be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot register with blank email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(\"Email cannot be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": null,\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot register with blank password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(\"Password cannot be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot register with password too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const minimumCharacters = 4;\r",
											"\r",
											"pm.test(\"Response should have correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(response.message).to.include(`The password have to be at least ${minimumCharacters} characters long`);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Login with existing credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Should containt token\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
											"})\r",
											"\r",
											"pm.test(\"Should be correct type\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
											"    pm.expect(response.type).to.eql('Bearer');\r",
											"})\r",
											"\r",
											"pm.test(\"Should expire in 1h\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
											"    pm.expect(response.expiresIn).to.eql(3600);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{enabledUserPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{enabledUserEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Login with wrong credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
											"    pm.expect(response.message).to.include('Unauthorized to access this resource, login please');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123456",
											"type": "string"
										},
										{
											"key": "username",
											"value": "unknown@unknown.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with disabled account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has correct message\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
											"    pm.expect(response.message).to.include('Unauthorized to access this resource, login please');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "12345",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{registerEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Registration Confirmation",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Register new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const confirmEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.collectionVariables.set(\"confirmEmail\", confirmEmail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{confirmEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch verification token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.text();\r",
											"\r",
											"pm.test(\"Response contain valid token\", () => {\r",
											"    pm.expect(response).to.be.a('string');\r",
											"    pm.collectionVariables.set('verificationToken', response);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/qa/token?email={{confirmEmail}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"qa",
										"token"
									],
									"query": [
										{
											"key": "email",
											"value": "{{confirmEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/register/confirm?token={{verificationToken}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register",
										"confirm"
									],
									"query": [
										{
											"key": "token",
											"value": "{{verificationToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Login after enabling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Should containt token\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('token').that.is.a('string');\r",
											"})\r",
											"\r",
											"pm.test(\"Should be correct type\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('type').that.is.a('string');\r",
											"    pm.expect(response.type).to.eql('Bearer');\r",
											"})\r",
											"\r",
											"pm.test(\"Should expire in 1h\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('expiresIn').that.is.a('number');\r",
											"    pm.expect(response.expiresIn).to.eql(3600);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{confirmEmail}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "12345",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Register new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const disabledEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.collectionVariables.set(\"disabledEmail\", disabledEmail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{disabledEmail}}\",\r\n    \"password\": \"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with disabled credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Correct message is returned\", () => {\r",
											"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
											"    pm.expect(response.message).to.eql('Unauthorized to access this resource, login please');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{disabledEmail}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "12345",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch verification token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.text();\r",
											"\r",
											"pm.test(\"Response contain valid token\", () => {\r",
											"    pm.expect(response).to.be.a('string');\r",
											"    pm.collectionVariables.set('expiredToken', response);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/qa/token?email={{disabledEmail}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"qa",
										"token"
									],
									"query": [
										{
											"key": "email",
											"value": "{{disabledEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Expire token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const date = new Date();\r",
											"const expiredDate = new Date(date.setMinutes(date.getMinutes() - (24 * 60)) - 1);\r",
											"const expiredDateJavaLocalDateTimeString = expiredDate.toISOString().replace(/Z/g, '')\r",
											"pm.collectionVariables.set('expiredDate', expiredDateJavaLocalDateTimeString);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/qa/token/:token?creationDate={{expiredDate}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"qa",
										"token",
										":token"
									],
									"query": [
										{
											"key": "creationDate",
											"value": "{{expiredDate}}"
										}
									],
									"variable": [
										{
											"key": "token",
											"value": "{{expiredToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration with expired token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", () => {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"pm.test('Should include correct message', () => {\r",
											"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
											"    pm.expect(response.message).to.include('Provided verification token expired');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8081/register/confirm?token={{expiredToken}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"register",
										"confirm"
									],
									"query": [
										{
											"key": "token",
											"value": "{{expiredToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "Method not allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", () => {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.test(\"Should contain correct response message\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty('message').that.is.a('string');\r",
									"    pm.expect(response.message).to.include('Request method GET not supported');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "registerEmail",
			"value": ""
		},
		{
			"key": "enabledUserEmail",
			"value": "test@maxq.com",
			"type": "string"
		},
		{
			"key": "enabledUserPassword",
			"value": "Test12345",
			"type": "string"
		},
		{
			"key": "confirmEmail",
			"value": ""
		},
		{
			"key": "verificationToken",
			"value": ""
		},
		{
			"key": "disabledEmail",
			"value": ""
		},
		{
			"key": "expiredToken",
			"value": ""
		},
		{
			"key": "expiredDate",
			"value": ""
		}
	]
}