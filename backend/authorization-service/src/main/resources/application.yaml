eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL:http://localhost:8761/eureka}

frontend:
  register:
    confirm:
      mapping: /register/confirm
  reset:
    password:
      mapping: /password/confirm
  url: ${FRONTEND_URL:http://localhost:5173}

jwt:
  issuer: authorization-service
  private-key-path: classpath:/private_key.pem
  public-key-path: classpath:/public_key.pem
  robot-public-key-path: classpath:/robot_public_key.pem

server:
  port: ${PORT:8081}

profile:
  exchange: "authorization-profile-exchange"
  topic:
    create: "profile.create"

spring:
  application:
    name: authorization-service
  datasource:
    password: ${AUTHORIZATION_POSTGRES_PASS:password}
    url: ${POSTGRES_LINK:jdbc:postgresql://localhost:5432/authorization-db?sslmode=disable}
    username: ${AUTHORIZATION_POSTGRES_USER:local_app}
  jpa:
    database: postgresql
    hibernate:
      ddl-auto: update
    show-sql: true
  rabbitmq:
    host: ${AUTHORIZATION_PROFILE_RABBITMQ_HOST:localhost}
    port: ${AUTHORIZATION_PROFILE_RABBITMQ_PORT:5672}
    username: ${AUTHORIZATION_PROFILE_RABBITMQ_USERNAME:local_app}
    password: ${AUTHORIZATION_PROFILE_RABBITMQ_PASSWORD:password}
    virtual-host: ${AUTHORIZATION_PROFILE_RABBITMQ_VIRTUAL_HOST:/}
  mail:
    host: smtp.gmail.com
    password: ${MAIL_PASSWORD}
    port: 587
    properties:
      mail:
        smtp:
          auth: true
          ssl:
            trust: smtp.gmail.com
          starttls:
            enable: true
    username: ${MAIL_USERNAME}

---

spring:
  config:
    activate:
      on-profile: QA
management:
  health:
    rabbit:
      enabled: false
    mail:
      enabled: false
eureka:
  client:
    enabled: false

---

spring:
  config:
    activate:
      on-profile: SIT
management:
  health:
    mail:
      enabled: false